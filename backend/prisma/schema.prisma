// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  ownedWorkspaces        Workspace[]     @relation("WorkspaceOwner")
  members                Member[]
  channelMembers         ChannelMember[]
  messages               Message[]       @relation("MessageAuthor")
  sentMessages           Message[]       @relation("MessageSender")
  receivedMessages       Message[]       @relation("MessageRecipient")
  notifications          Notification[]  @relation("UserNotifications") // Notifications received by this user
  triggeredNotifications Notification[]  @relation("UserTriggeredNotifications") // Notifications sent by this user
  reactions              Reaction[]      // Reactions made by this user
  uploadedAttachments    Attachment[]    @relation("UserUploads")

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner    User      @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  Member[]
  channels Channel[]
  messages Message[]
  attachments Attachment[] @relation("WorkspaceAttachments")


  @@map("workspaces")
}

model Member {
  id          String     @id @default(cuid())
  userId      String
  workspaceId String
  role        MemberRole @default(MEMBER)
  joinedAt    DateTime   @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("members")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  workspaceId String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members       ChannelMember[]
  messages      Message[]
  notifications Notification[]  @relation("ChannelNotifications")

  @@unique([name, workspaceId])
  @@map("channels")
}

model ChannelMember {
  id        String   @id @default(cuid())
  channelId String
  userId    String
  joinedAt  DateTime @default(now())

  // Relationships
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("channel_members")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  userId      String
  channelId   String?
  workspaceId String?
  recipientId String? // For direct messages
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user             User           @relation("MessageAuthor", fields: [userId], references: [id], onDelete: Cascade)
  channel          Channel?       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  workspace        Workspace?     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sender           User?          @relation("MessageSender", fields: [userId], references: [id], onDelete: Cascade)
  recipient        User?          @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  mentionedUserIds String? // Comma-separated list of user IDs
  notifications    Notification[] @relation("MessageNotifications")

  // Threading fields
  parentId      String?
  parentMessage Message?  @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       Message[] @relation("ThreadReplies")

  threadId      String?    // ID of the root message of the thread. Indexed for faster thread fetching.
  replyCount    Int        @default(0)
  lastReplyAt   DateTime?  // Timestamp of the last reply in the thread, for sorting threads.
  reactions     Reaction[] // Reactions on this message
  attachments   Attachment[] // Attachments on this message

  @@index([threadId, createdAt]) // To fetch all messages in a thread and sort them
  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String   // e.g., "üëç", ":+1:", "thumbsup_alias"
  messageId String
  userId    String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([emoji, messageId, userId]) // User can only react with the same emoji once per message
  @@map("reactions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String // User who receives the notification
  type      String // e.g., 'mention', 'new_dm'
  messageId String? // Link to the message that triggered the notification
  channelId String? // Link to the channel (if relevant)
  senderId  String // User who triggered the notification
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user    User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  message Message? @relation("MessageNotifications", fields: [messageId], references: [id], onDelete: Cascade)
  channel Channel? @relation("ChannelNotifications", fields: [channelId], references: [id], onDelete: Cascade)
  sender  User     @relation("UserTriggeredNotifications", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  mimetype    String
  size        Int // in bytes
  url         String // URL to access the stored file (local path for dev)

  messageId   String?
  message     Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull) // SetNull so attachment record remains if message is deleted

  uploaderId  String
  uploader    User      @relation("UserUploads", fields: [uploaderId], references: [id], onDelete: Cascade)

  workspaceId String?   // Optional: to scope attachments to a workspace
  workspace   Workspace? @relation("WorkspaceAttachments", fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())

  @@map("attachments")
}

enum MemberRole {
  ADMIN
  MEMBER
}
